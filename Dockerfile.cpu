# Dockerfile for CPU-only environments.

# ---- Builder Stage ----
# This stage installs build tools and compiles Python dependencies into wheels.
FROM python:3.10-slim AS builder

# Install build essentials for compiling dependencies like llama-cpp-python
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential cmake \
    && rm -rf /var/lib/apt/lists/*

# Create a directory for the wheels.
WORKDIR /wheels

# Copy only the requirements file to leverage layer caching.
COPY requirements.txt .

# Build wheels from requirements.txt. No GPU-specific flags are needed.
# llama-cpp-python will be built for CPU.
RUN pip wheel --wheel-dir=/wheels -r requirements.txt


# ---- Final Stage ----
FROM python:3.10-slim

# Create a non-root user for security.
RUN useradd --create-home --shell /bin/bash appuser

WORKDIR /app

# Copy the built wheels from the builder stage.
COPY --from=builder /wheels /wheels

# Install the wheels.
RUN pip install --no-cache-dir /wheels/*.whl && rm -rf /wheels

# Copy the application code and assets.
# Note: data is handled by volumes, not copied in.
COPY ./app ./app
COPY ./static ./static
COPY ./templates ./templates

# Change ownership of the app directory.
RUN chown -R appuser:appuser /app

# Switch to the non-root user
USER appuser

# Expose the port the application runs on
EXPOSE 8000

# Command to run the application when the container starts
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]