1	<template>
2	  <BaseLayout>
3	    <!-- Header -->
4	    <div class="mb-8">
5	      <div class="flex items-center justify-between">
6	        <div>
7	          <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Settings</h1>
8	          
9	        </div>
10	      </div>
11	    </div>
12	
13	    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
14	      <!-- Settings Navigation -->
15	      <BaseCard class="lg:col-span-1">
16	        <div class="card-header">
17	          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Settings</h3>
18	        </div>
19	        <nav class="space-y-1 p-4">
20	          <button
21	            v-for="tab in settingsTabs"
22	            :key="tab.id"
23	            @click="activeTab = tab.id"
24	            class="nav-item w-full text-left"
25	            :class="activeTab === tab.id ? 'nav-item-active' : 'nav-item-inactive'"
26	          >
27	            <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
28	              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" :d="tab.icon" />
29	            </svg>
30	            {{ tab.name }}
31	          </button>
32	        </nav>
33	      </BaseCard>
34	
35	      <!-- Settings Content -->
36	      <BaseCard class="lg:col-span-2">
37	        <!-- Profile Settings -->
38	        <div v-if="activeTab === 'profile'" class="space-y-6">
39	          <div class="card-header">
40	            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Profile Information</h3>
41	            <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">Update your personal information</p>
42	          </div>
43	          
44	          <form @submit.prevent="updateProfile" class="space-y-6 p-6">
45	            <BaseInput
46	              v-model="profileForm.firstName"
47	              label="First Name"
48	              placeholder="Enter your first name"
49	              :error="profileErrors.firstName"
50	              required
51	            />
52	
53	            <BaseInput
54	              v-model="profileForm.lastName"
55	              label="Last Name"
56	              placeholder="Enter your last name"
57	              :error="profileErrors.lastName"
58	              required
59	            />
60	            
61	            <div class="flex justify-end">
62	              <BaseButton
63	                type="submit"
64	                variant="primary"
65	                :loading="isUpdatingProfile"
66	              >
67	                Update Profile
68	              </BaseButton>
69	            </div>
70	          </form>
71	        </div>
72	
73	        <!-- Security Settings -->
74	        <div v-if="activeTab === 'security'" class="space-y-6">
75	          <div class="card-header">
76	            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Security Settings</h3>
77	            <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">Manage your password and security preferences</p>
78	          </div>
79	          
80	          <form @submit.prevent="changePassword" class="space-y-6 p-6">
81	            <BaseInput
82	              v-model="passwordForm.currentPassword"
83	              type="password"
84	              label="Current Password"
85	              placeholder="Enter your current password"
86	              :error="passwordErrors.currentPassword"
87	              required
88	            />
89	            
90	            <BaseInput
91	              v-model="passwordForm.newPassword"
92	              type="password"
93	              label="New Password"
94	              placeholder="Enter your new password"
95	              :error="passwordErrors.newPassword"
96	              required
97	            />
98	            
99	            <BaseInput
100	              v-model="passwordForm.confirmPassword"
101	              type="password"
102	              label="Confirm New Password"
103	              placeholder="Confirm your new password"
104	              :error="passwordErrors.confirmPassword"
105	              required
106	            />
107	            
108	            <div class="flex justify-end">
109	              <BaseButton
110	                type="submit"
111	                variant="primary"
112	                :loading="isChangingPassword"
113	              >
114	                Change Password
115	              </BaseButton>
116	            </div>
117	          </form>
118	        </div>
119	
120	        <!-- AI Settings -->
121	        <div v-if="activeTab === 'ai'" class="space-y-6">
122	          <div class="card-header">
123	            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">AI Configuration</h3>
124	            <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">Configure your AI assistant behavior and provider settings</p>
125	          </div>
126	          
127	          <div class="space-y-6 p-6">
128	            <!-- AI Provider Selection -->
129	            <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
130	              <div class="flex items-center justify-between mb-4">
131	                <div>
132	                  <h4 class="text-sm font-medium text-gray-900 dark:text-white">AI Provider</h4>
133	                  <p class="text-sm text-gray-500 dark:text-gray-400">Choose your preferred AI provider</p>
134	                </div>
135	              </div>
136	              
137	              <div class="space-y-3">
138	                <label class="flex items-center space-x-3 cursor-pointer">
139	                  <input
140	                    v-model="aiSettings.provider"
141	                    type="radio"
142	                    value="gemini"
143	                    class="form-radio text-primary-600"
144	                  />
145	                  <div>
146	                    <span class="text-sm font-medium text-gray-900 dark:text-white">Google AI Bot</span>
147	                    <p class="text-xs text-gray-500 dark:text-gray-400">Fast and reliable AI responses</p>
148	                  </div>
149	                </label>
150	                
151	                <label class="flex items-center space-x-3 cursor-pointer">
152	                  <input
153	                    v-model="aiSettings.provider"
154	                    type="radio"
155	                    value="openai"
156	                    class="form-radio text-primary-600"
157	                  />
158	                  <div>
159	                    <span class="text-sm font-medium text-gray-900 dark:text-white">OpenAI GPT-3.5</span>
160	                    <p class="text-xs text-gray-500 dark:text-gray-400">Advanced conversational AI</p>
161	                  </div>
162	                </label>
163	              </div>
164	            </div>
165	
166	            <!-- Response Time Settings -->
167	            <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
168	              <div class="flex items-center justify-between mb-4">
169	                <div>
170	                  <h4 class="text-sm font-medium text-gray-900 dark:text-white">Response Timing</h4>
171	                  <p class="text-sm text-gray-500 dark:text-gray-400">Control how quickly the AI responds to messages</p>
172	                </div>
173	              </div>
174	              
175	              <div class="space-y-4">
176	                <div>
177	                  <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
178	                    Response Delay: {{ aiSettings.responseDelay }}s
179	                  </label>
180	                  <div class="flex items-center space-x-4">
181	                    <span class="text-xs text-gray-500 dark:text-gray-400">Instant</span>
182	                    <input
183	                      v-model.number="aiSettings.responseDelay"
184	                      type="range"
185	                      min="0"
186	                      max="40"
187	                      step="5"
188	                      class="flex-1 h-2 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer slider"
189	                    />
190	                    <span class="text-xs text-gray-500 dark:text-gray-400">40s</span>
191	                  </div>
192	                  <div class="mt-2 grid grid-cols-9 gap-1 text-xs text-gray-400">
193	                    <span class="text-center">0s</span>
194	                    <span class="text-center">5s</span>
195	                    <span class="text-center">10s</span>
196	                    <span class="text-center">15s</span>
197	                    <span class="text-center">20s</span>
198	                    <span class="text-center">25s</span>
199	                    <span class="text-center">30s</span>
200	                    <span class="text-center">35s</span>
201	                    <span class="text-center">40s</span>
202	                  </div>
203	                </div>
204	                
205	                <!-- Quick Selection Buttons -->
206	                <div class="flex flex-wrap gap-2">
207	                  <button
208	                    v-for="delay in [0, 5, 10, 15, 20, 25, 30, 35, 40]"
209	                    :key="delay"
210	                    @click="aiSettings.responseDelay = delay"
211	                    :class="[
212	                      'px-3 py-1 text-xs rounded-full border transition-colors',
213	                      aiSettings.responseDelay === delay
214	                        ? 'bg-primary-100 border-primary-500 text-primary-700'
215	                        : 'bg-gray-50 dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-600'
216	                    ]"
217	                  >
218	                    {{ delay }}s
219	                  </button>
220	                </div>
221	                
222	                <div class="text-xs text-gray-500 dark:text-gray-400 bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg">
223	                  <strong>Note:</strong> Response delay adds a pause before the AI starts responding. 
224	                  This can make conversations feel more natural and give users time to read previous messages.
225	                </div>
226	              </div>
227	            </div>
228	            
229	            <div class="pt-4 border-t border-gray-200">
230	              <BaseButton
231	                variant="primary"
232	                :loading="isUpdatingAiSettings"
233	                @click="updateAiSettings"
234	              >
235	                Save AI Settings
236	              </BaseButton>
237	            </div>
238	          </div>
239	        </div>
240	
241	        <!-- API Settings -->
242	        <div v-if="activeTab === 'api'" class="space-y-6">
243	          <div class="card-header">
244	            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">API Configuration</h3>
245	            <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">Manage your API keys and integrations</p>
246	          </div>
247	          
248	          <div class="space-y-6 p-6">
249	            <!-- Xelence Integration -->
250	            <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
251	              <div class="flex items-center justify-between mb-4">
252	                <div>
253	                  <h4 class="text-sm font-medium text-gray-900 dark:text-white">Xelence Integration</h4>
254	                  <p class="text-sm text-gray-500 dark:text-gray-400">Configure your Xelence affiliate credentials for media reports</p>
255	                </div>
256	                <div class="flex items-center space-x-2">
257	                  <div class="w-3 h-3 rounded-full" :class="xelenceApiStatus ? 'bg-success-400' : 'bg-warning-400'"></div>
258	                  <span class="text-sm font-medium" :class="xelenceApiStatus ? 'text-success-600' : 'text-warning-600'">
259	                    {{ xelenceApiStatus ? 'Configured' : 'Not Configured' }}
260	                  </span>
261	                </div>
262	              </div>
263	              
264	              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
265	                <BaseInput
266	                  v-model="xelenceForm.affiliateId"
267	                  label="Affiliate ID"
268	                  placeholder="Enter your Xelence affiliate ID"
269	                  :error="xelenceErrors.affiliateId"
270	                />
271	                
272	                <BaseInput
273	                  v-model="xelenceForm.apiKey"
274	                  type="password"
275	                  label="API Key"
276	                  placeholder="Enter your Xelence API key"
277	                  :error="xelenceErrors.apiKey"
278	                />
279	              </div>
280	              
281	              <div class="mt-4 flex justify-end">
282	                <BaseButton
283	                  variant="primary"
284	                  size="sm"
285	                  :loading="isUpdatingXelence"
286	                  @click="updateXelenceCredentials"
287	                >
288	                  Save Credentials
289	                </BaseButton>
290	              </div>
291	            </div>
292	
293	            <!-- Google AI Bot API -->
294	            <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
295	              <div class="flex items-center justify-between mb-4">
296	                <div>
297	                  <h4 class="text-sm font-medium text-gray-900 dark:text-white">Google AI Bot API</h4>
298	                  <p class="text-sm text-gray-500 dark:text-gray-400">Configure your AI Bot API key for AI responses</p>
299	                </div>
300	                <div class="flex items-center space-x-2">
301	                  <div class="w-3 h-3 rounded-full" :class="geminiApiStatus ? 'bg-success-400' : 'bg-warning-400'"></div>
302	                  <span class="text-sm font-medium" :class="geminiApiStatus ? 'text-success-600' : 'text-warning-600'">
303	                    {{ geminiApiStatus ? 'Configured' : 'Not Configured' }}
304	                  </span>
305	                </div>
306	              </div>
307	              
308	              <BaseInput
309	                v-model="apiForm.geminiApiKey"
310	                type="password"
311	                label="AI Bot API Key"
312	                placeholder="Enter your AI Bot API key"
313	                hint="You can get your API key from Google AI Studio"
314	              />
315	              
316	              <div class="mt-4 flex justify-end">
317	                <BaseButton
318	                  variant="primary"
319	                  size="sm"
320	                  :loading="isUpdatingApi"
321	                  @click="updateGeminiApiKey"
322	                >
323	                  Save API Key
324	                </BaseButton>
325	              </div>
326	            </div>
327	
328	            <!-- API Usage Stats -->
329	            <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
330	              <h4 class="text-sm font-medium text-gray-900 dark:text-white mb-4">API Usage Statistics</h4>
331	              <div class="grid grid-cols-2 gap-4">
332	                <div class="text-center">
333	                  <div class="text-2xl font-bold text-primary-600">{{ apiUsage.requests }}</div>
334	                  <div class="text-sm text-gray-500 dark:text-gray-400">Total Requests</div>
335	                </div>
336	                <div class="text-center">
337	                  <div class="text-2xl font-bold text-success-600">{{ apiUsage.tokens }}</div>
338	                  <div class="text-sm text-gray-500 dark:text-gray-400">Tokens Used</div>
339	                </div>
340	              </div>
341	            </div>
342	          </div>
343	        </div>
344	
345	
346	
347	        <!-- Customization -->
348	        <div v-if="activeTab === 'customization'" class="space-y-6">
349	          <div class="card-header">
350	            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Customization</h3>
351	            <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">Personalize your chatbot interface</p>
352	          </div>
353	          
354	          <div class="space-y-6 p-6">
355	            <BaseInput
356	              v-model="customizationForm.websiteName"
357	              label="Website Name"
358	              placeholder="Enter your website name"
359	              :error="customizationErrors.websiteName"
360	            />
361	
362	            <BaseInput
363	              v-model="customizationForm.logoUrl"
364	              label="Logo URL"
365	              placeholder="https://example.com/logo.png"
366	              :error="customizationErrors.logoUrl"
367	            />
368	
369	            <BaseInput
370	              v-model="customizationForm.faviconUrl"
371	              label="Favicon URL"
372	              placeholder="https://example.com/favicon.ico"
373	              :error="customizationErrors.faviconUrl"
374	            />
375	
376	            <!-- Dark Mode Toggle -->
377	            <div class="pt-4 border-t border-gray-200 dark:border-gray-700">
378	              <div class="flex items-center justify-between">
379	                <div>
380	                  <h4 class="text-sm font-medium text-gray-900 dark:text-white">Dark Mode</h4>
381	                  <p class="text-sm text-gray-500 dark:text-gray-400">Switch to dark theme</p>
382	                </div>
383	                <label class="relative inline-flex items-center cursor-pointer">
384	                  <input
385	                    v-model="darkMode"
386	                    type="checkbox"
387	                    class="sr-only peer"
388	                    @change="toggleDarkMode"
389	                  />
390	                  <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
391	                </label>
392	              </div>
393	            </div>
394	            
395	            <div class="pt-4 border-t border-gray-200">
396	              <BaseButton
397	                variant="primary"
398	                :loading="isUpdatingCustomization"
399	                @click="updateCustomization"
400	              >
401	                Save Customization
402	              </BaseButton>
403	            </div>
404	          </div>
405	        </div>
406	      </BaseCard>
407	    </div>
408	  </BaseLayout>
409	</template>
410	
411	<script setup lang="ts">
412	import { ref, onMounted } from 'vue'
413	import { useAuthStore } from '@/stores/auth'
414	import { useToast } from '@/composables/useToast'
415	import BaseLayout from '@/components/BaseLayout.vue'
416	import BaseCard from '@/components/BaseCard.vue'
417	import BaseButton from '@/components/BaseButton.vue'
418	import BaseInput from '@/components/BaseInput.vue'
419	import { apiService } from '@/services/api'
420	// Using simple SVG icons instead of Heroicons
421	const UserIcon = 'M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z'
422	const ShieldCheckIcon = 'M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z'
423	
424	const KeyIcon = 'M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z'
425	
426	const authStore = useAuthStore()
427	const { success: showSuccess, error: showError } = useToast()
428	
429	const activeTab = ref('profile')
430	
431	const BotIcon = 'M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z'
432	const PaintBrushIcon = 'M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z'
433	
434	const settingsTabs = [
435	  { id: 'profile', name: 'Profile', icon: UserIcon },
436	  { id: 'security', name: 'Security', icon: ShieldCheckIcon },
437	  { id: 'ai', name: 'AI Settings', icon: BotIcon },
438	  { id: 'api', name: 'API Settings', icon: KeyIcon },
439	  { id: 'customization', name: 'Customization', icon: PaintBrushIcon }
440	]
441	
442	// Profile form
443	const profileForm = ref({
444	  firstName: '',
445	  lastName: ''
446	})
447	
448	const profileErrors = ref({
449	  firstName: '',
450	  lastName: ''
451	})
452	
453	const isUpdatingProfile = ref(false)
454	
455	// Password form
456	const passwordForm = ref({
457	  currentPassword: '',
458	  newPassword: '',
459	  confirmPassword: ''
460	})
461	
462	const passwordErrors = ref({
463	  currentPassword: '',
464	  newPassword: '',
465	  confirmPassword: ''
466	})
467	
468	const isChangingPassword = ref(false)
469	
470	// AI settings form
471	const aiSettings = ref({
472	  provider: 'gemini',
473	  responseDelay: 0
474	})
475	
476	const isUpdatingAiSettings = ref(false)
477	
478	// Xelence form
479	const xelenceForm = ref({
480	  affiliateId: '',
481	  apiKey: ''
482	})
483	
484	const xelenceErrors = ref({
485	  affiliateId: '',
486	  apiKey: ''
487	})
488	
489	const xelenceApiStatus = ref(false)
490	const isUpdatingXelence = ref(false)
491	
492	// API form
493	const apiForm = ref({
494	  geminiApiKey: ''
495	})
496	
497	const geminiApiStatus = ref(false)
498	const isUpdatingApi = ref(false)
499	const apiUsage = ref({
500	  requests: 0,
501	  tokens: 0
502	})
503	
504	// Preferences
505	// Dark mode functionality
506	const darkMode = ref(false)
507	
508	// Customization form
509	const customizationForm = ref({
510	  websiteName: '',
511	  logoUrl: '',
512	  faviconUrl: ''
513	})
514	
515	const customizationErrors = ref({
516	  websiteName: '',
517	  logoUrl: '',
518	  faviconUrl: ''
519	})
520	
521	const isUpdatingCustomization = ref(false)
522	
523	const updateProfile = async () => {
524	  // Validate form
525	  profileErrors.value = { firstName: '', lastName: '' }
526	
527	  if (!profileForm.value.firstName.trim()) {
528	    profileErrors.value.firstName = 'First name is required'
529	  }
530	
531	  if (!profileForm.value.lastName.trim()) {
532	    profileErrors.value.lastName = 'Last name is required'
533	  }
534	
535	  if (profileErrors.value.firstName || profileErrors.value.lastName) {
536	    return
537	  }
538	
539	  isUpdatingProfile.value = true
540	
541	  try {
542	    await authStore.updateProfile({
543	      first_name: profileForm.value.firstName,
544	      last_name: profileForm.value.lastName
545	    })
546	    
547	    showSuccess('Profile updated successfully!')
548	  } catch (err: any) {
549	    showError('Failed to update profile', err.message)
550	  } finally {
551	    isUpdatingProfile.value = false
552	  }
553	}
554	
555	const changePassword = async () => {
556	  // Validate form
557	  passwordErrors.value = { currentPassword: '', newPassword: '', confirmPassword: '' }
558	  
559	  if (!passwordForm.value.currentPassword) {
560	    passwordErrors.value.currentPassword = 'Current password is required'
561	  }
562	  
563	  if (!passwordForm.value.newPassword) {
564	    passwordErrors.value.newPassword = 'New password is required'
565	  } else if (passwordForm.value.newPassword.length < 6) {
566	    passwordErrors.value.newPassword = 'Password must be at least 6 characters'
567	  }
568	  
569	  if (!passwordForm.value.confirmPassword) {
570	    passwordErrors.value.confirmPassword = 'Please confirm your password'
571	  } else if (passwordForm.value.newPassword !== passwordForm.value.confirmPassword) {
572	    passwordErrors.value.confirmPassword = 'Passwords do not match'
573	  }
574	  
575	  if (passwordErrors.value.currentPassword || passwordErrors.value.newPassword || passwordErrors.value.confirmPassword) {
576	    return
577	  }
578	  
579	  isChangingPassword.value = true
580	  
581	  try {
582	    await authStore.changePassword({
583	      new_password: passwordForm.value.newPassword,
584	      confirm_password: passwordForm.value.confirmPassword
585	    })
586	    
587	    showSuccess('Password changed successfully!')
588	    passwordForm.value = {
589	      currentPassword: '',
590	      newPassword: '',
591	      confirmPassword: ''
592	    }
593	  } catch (err: any) {
594	    showError('Failed to change password', err.message)
595	  } finally {
596	    isChangingPassword.value = false
597	  }
598	}
599	
600	const updateAiSettings = async () => {
601	  isUpdatingAiSettings.value = true
602	  
603	  try {
604	    console.log('Updating AI settings:', {
605	      ai_provider: aiSettings.value.provider,
606	      response_delay_seconds: aiSettings.value.responseDelay
607	    })
608	    
609	    const response = await apiService.post('/settings', {
610	      ai_provider: aiSettings.value.provider,
611	      response_delay_seconds: aiSettings.value.responseDelay
612	    })
613	    
614	    console.log('AI settings update response:', response)
615	    
616	    // Immediately update the auth store to sync the UI
617	    if (authStore.user) {
618	      authStore.user.profile = {
619	        ...authStore.user.profile,
620	        ai_provider: aiSettings.value.provider,
621	        response_delay_seconds: aiSettings.value.responseDelay
622	      }
623	    }
624	    
625	    showSuccess('AI settings updated successfully!')
626	  } catch (err: any) {
627	    console.error('AI settings update error:', err)
628	    showError('Failed to update AI settings', err.message)
629	  } finally {
630	    isUpdatingAiSettings.value = false
631	  }
632	}
633	
634	const updateXelenceCredentials = async () => {
635	  // Validate form
636	  xelenceErrors.value = { affiliateId: '', apiKey: '' }
637	  
638	  if (!xelenceForm.value.affiliateId.trim()) {
639	    xelenceErrors.value.affiliateId = 'Affiliate ID is required'
640	  }
641	  
642	  if (!xelenceForm.value.apiKey.trim()) {
643	    xelenceErrors.value.apiKey = 'API Key is required'
644	  }
645	  
646	  if (xelenceErrors.value.affiliateId || xelenceErrors.value.apiKey) {
647	    return
648	  }
649	  
650	  isUpdatingXelence.value = true
651	  
652	  try {
653	    await apiService.post('/settings', {
654	      xelence_affiliateid: xelenceForm.value.affiliateId,
655	      xelence_x_api_key: xelenceForm.value.apiKey
656	    })
657	    
658	    showSuccess('Xelence credentials updated successfully!')
659	    xelenceApiStatus.value = true
660	  } catch (err: any) {
661	    showError('Failed to update Xelence credentials', err.message)
662	  } finally {
663	    isUpdatingXelence.value = false
664	  }
665	}
666	
667	const updateGeminiApiKey = async () => {
668	  isUpdatingApi.value = true
669	  
670	  try {
671	    await apiService.post('/settings/gemini-api', {
672	      api_key: apiForm.value.geminiApiKey
673	    })
674	    
675	    showSuccess('AI Bot API key updated successfully!')
676	    geminiApiStatus.value = true
677	  } catch (err: any) {
678	    showError('Failed to update API key', err.message)
679	  } finally {
680	    isUpdatingApi.value = false
681	  }
682	}
683	
684	// Dark mode functionality
685	const toggleDarkMode = () => {
686	  if (darkMode.value) {
687	    document.documentElement.classList.add('dark')
688	    localStorage.setItem('darkMode', 'true')
689	  } else {
690	    document.documentElement.classList.remove('dark')
691	    localStorage.setItem('darkMode', 'false')
692	  }
693	}
694	
695	const updateCustomization = async () => {
696	  isUpdatingCustomization.value = true
697	  customizationErrors.value = { websiteName: '', logoUrl: '', faviconUrl: '' }
698	  
699	  try {
700	    await apiService.post('/settings', {
701	      custom_website_name: customizationForm.value.websiteName,
702	      custom_logo_url: customizationForm.value.logoUrl,
703	      custom_favicon_url: customizationForm.value.faviconUrl
704	    })
705	    
706	    // Immediately update the auth store to sync the UI
707	    if (authStore.user) {
708	      authStore.user.profile = {
709	        ...authStore.user.profile,
710	        custom_website_name: customizationForm.value.websiteName,
711	        custom_logo_url: customizationForm.value.logoUrl,
712	        custom_favicon_url: customizationForm.value.faviconUrl
713	      }
714	      
715	      // Update document title immediately
716	      if (customizationForm.value.websiteName) {
717	        document.title = `${customizationForm.value.websiteName} Dashboard`
718	      }
719	
720	      // Update favicon immediately if provided
721	      if (customizationForm.value.faviconUrl && customizationForm.value.faviconUrl.trim()) {
722	        const existing = document.querySelector("link[rel~='icon']") as HTMLLinkElement | null
723	        if (existing) {
724	          existing.href = customizationForm.value.faviconUrl.trim()
725	        } else {
726	          const link = document.createElement('link')
727	          link.rel = 'icon'
728	          link.href = customizationForm.value.faviconUrl.trim()
729	          document.head.appendChild(link)
730	        }
731	      }
732	    }
733	    
734	    showSuccess('Customization updated successfully!')
735	  } catch (err: any) {
736	    showError('Failed to update customization', err.message)
737	  } finally {
738	    isUpdatingCustomization.value = false
739	  }
740	}
741	
742	const loadSettings = async () => {
743	  try {
744	    // Load profile data from auth store
745	    if (authStore.user) {
746	      profileForm.value = {
747	        firstName: authStore.user.profile?.first_name || '',
748	        lastName: authStore.user.profile?.last_name || ''
749	      }
750	      
751	      // Load AI settings from existing user data
752	      if (authStore.user.profile) {
753	        const profile = authStore.user.profile as any
754	        aiSettings.value = {
755	          provider: profile.ai_provider || 'gemini',
756	          responseDelay: profile.response_delay_seconds || 0
757	        }
758	      }
759	      
760	      // Load customization settings from existing user data
761	      if (authStore.user.profile) {
762	        const profile = authStore.user.profile as any
763	        customizationForm.value = {
764	          websiteName: profile.custom_website_name || '',
765	          logoUrl: profile.custom_logo_url || '',
766	          faviconUrl: profile.custom_favicon_url || ''
767	        }
768	      }
769	      
770	      // Load Xelence credentials from existing user data
771	      if (authStore.user.profile) {
772	        xelenceForm.value = {
773	          affiliateId: authStore.user.profile.xelence_affiliateid || '',
774	          apiKey: authStore.user.profile.xelence_x_api_key ? '••••••••' : ''
775	        }
776	        xelenceApiStatus.value = !!(authStore.user.profile.xelence_affiliateid && authStore.user.profile.xelence_x_api_key)
777	      }
778	    }
779	    
780	    // Load API settings
781	    const apiResponse = await apiService.get('/settings/api') as { 
782	      gemini_configured?: boolean;
783	      usage?: { requests: number; tokens: number };
784	    }
785	    geminiApiStatus.value = apiResponse.gemini_configured || false
786	    apiUsage.value = apiResponse.usage || { requests: 0, tokens: 0 }
787	    
788	    // Load dark mode from localStorage
789	    const savedDarkMode = localStorage.getItem('darkMode')
790	    darkMode.value = savedDarkMode === 'true'
791	    if (darkMode.value) {
792	      document.documentElement.classList.add('dark')
793	    }
794	    
795	  } catch (err: any) {
796	    console.error('Failed to load settings:', err)
797	  }
798	}
799	
800	onMounted(async () => {
801	  // Wait for auth store to be initialized if needed
802	  if (authStore.user === null && !authStore.isLoading) {
803	    await authStore.initializeAuth()
804	  }
805	  
806	  loadSettings()
807	})
808	</script>
